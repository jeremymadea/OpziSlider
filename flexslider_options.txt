array(
  'namespace'         => array( "flex-",        'string',  "Prefix attached to the class of every element generated by flexslider." ), 
  'selector'          => array( ".slides > li", 'string',  "Selector: Must match a simple pattern. '{container} > {slide}'" ),
  'animation'         => array( "fade",         'string',  'Animation type, "fade" or "slide"' ),
  'easing'            => array( "swing",        'string',  'Determines the easing method used in jQuery transitions.'),
  'direction'         => array( "horizontal",   'string',  'The sliding direction, "horizontal" or "vertical".' ), 
  'reverse'           => array( false,          'boolean', 'Reverse the animation direction.' ),
  'animationLoop'     => array( true,           'boolean', 'Should the animation loop?' ), 
  'smoothHeight'      => array( false,          'boolean', 'Allow height of the slider to animate smoothly in horizontal mode.' ), 
  'startAt'           => array( 0,              'integer', 'Array index. The slide that the slider should start on.' ),
  'slideshow'         => array( true,           'boolean', 'Animate slider automatically.' ),
  'slideshowSpeed'    => array( 7000,           'integer', 'Set the speed of the slideshow cycling, in milliseconds.' ),
  'animationSpeed'    => array( 600,            'integer', 'Set the speed of animations, in milliseconds.' ),
  'initDelay'         => array( 0,              'integer', 'Set an initialization delay, in milliseconds.' ),
  'randomize'         => array( false,          'boolean', 'Randomize slide order. ),

// Usability features
  'pauseOnAction'     => array( true,           'boolean', 'Pause the slideshow when interacting with control elements. RECOMMENDED.' ),
  'pauseOnHover'      => array( false,          'boolean', 'Pause the slideshow while hovering over slider.' ),
  'useCSS'            => array( true,           'boolean', 'Slider will use CSS3 transitions if available.' ),
  'touch'             => array( true,           'boolean', 'Allow touch swipe navigation of the slider on touch-enabled devices.' ),
  'video'             => array( false,          'boolean', 'If using video in the slider, will prevent CSS3 3D Transforms.' ),

// Primary Controls
  'controlNav'        => array( true,           'boolean', 'Create navigation for paging control of each slide?' ),
  'directionNav'      => array( true,           'boolean', 'Create navigation for previous/next navigation? (true/false)' ),
  'prevText'          => array( "Previous",     'string',  'Set the text for the "previous" directionNav item.' ),
  'nextText'          => array( "Next",         'string',  'Set the text for the "next" directionNav item.' ),

// Secondary Navigation
  'keyboard' => array( true,                    'boolean', 'Allow slider navigating via keyboard left/right keys' ),
  'multipleKeyboard'  => array( false,          'boolean', 'Allow keyboard nav for multiple sliders.' ), 
  //'mousewheel'        => array( false,          'boolean', 'Requires jquery.mousewheel.js.' ),
  'pausePlay'         => array( false,          'boolean', 'Create pause/play dynamic element.' ),
  'pauseText'         => array( 'Pause',        'string',  'Set the text for the "pause" pausePlay item.' ),
  'playText'          => array( 'Play',         'string',  'Set the text for the "play" pausePlay item.' ),

// Special properties
  'controlsContainer' => array( "",             'string',  "Class selector for container that nav elements should be appended to." ), 
  'manualControls'    => array( "",             'string',  "Selector for custom control navigation." ), 
  //'sync'              => array( "",             'string',  "Selector: mirror the actions performed on this slider with another slider." ),
  //'asNavFor'          => array( "",             'string',  "Selector for making the slider the thumbnail navigation for another slider." ),

// Carousel Options
  'itemWidth'         => array( 0,              'integer', 'Box-model width of carousel items, including horizontal borders and padding.'), 
  'itemMargin'        => array( 0,              'integer', 'Margin between carousel items.' ),
  'minItems'          => array( 0,              'integer', 'Minimum number of carousel items that should be visible.' ), 
  'maxItems'          => array( 0,              'integer', 'Maxmimum number of carousel items that should be visible.' ), 
  'move'              => array( 0,              'integer', 'Number of carousel items that should move on animation. (0 = all visible.)' ), 
);
